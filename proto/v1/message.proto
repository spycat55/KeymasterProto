syntax = "proto3";

package api.webrtc.v1;
import "google/protobuf/timestamp.proto";

option go_package = "github.com/bitcoin-sv/KeyRTCServer/api_webrtc/gen/v1";

// ------------------ 通用枚举与错误码 ------------------

enum MsgKind {
  KIND_UNSPECIFIED = 0;
  KIND_ERROR = 1;
  KIND_WS_SIGNALING = 2;
//   KIND_RTC_FILE_QUOTE = 3;
//   KIND_RTC_FILE_CONTENT = 4;
  KIND_FILE_DEMAND_REQUEST = 10;      // 文件需求请求
  KIND_FILE_DEMAND_BROADCAST = 11;    // 文件需求广播
  KIND_FEE_POOL_CREATE = 12;          // 费用池创建
  KIND_FEE_POOL_SIGN = 13;            // 费用池签名
  KIND_FEE_POOL_BASE_TX = 14;         // 发送基础交易
  KIND_FEE_POOL_UPDATE = 15;          // 费用池更新
  KIND_FEE_POOL_UPDATE_NOTIFY = 16;   // 费用池更新通知（服务器发送给客户端）
  KIND_FEE_POOL_CLOSE = 17;           // 费用池关闭
  KIND_FEE_POOL_STATUS_QUERY = 18;    // 费用池状态查询
  KIND_FEE_POOL_STATUS_RESPONSE = 19; // 费用池状态响应
  KIND_FEE_POOL_LIST_QUERY = 20;      // 费用池列表查询
  KIND_FEE_POOL_LIST_RESPONSE = 21;   // 费用池列表响应
}

// ErrorCode 改用字符串，不再定义枚举。请在 ErrorReply.error_code 字段中填入具体错误字符串。

// ------------------ 核心协议结构 ------------------

message Header {
  MsgKind kind = 1;
  string message_id = 2;          // 全局唯一 ID
  string correlation_id = 3;      // 关联请求/响应 ID
  google.protobuf.Timestamp ts = 4; // 发送时间
  bytes from_pubkey = 5;          // 发送方公钥
  bytes to_pubkey = 6;            // 接收方公钥
}

message Envelope {
  uint32 version = 1; // 协议版本
  Header header = 2;

  // 安全字段（必填）
  bytes signature = 3;
  string signature_algo = 4; // 如 "ECDSA_P256_SHA256"

  oneof payload {
    ErrorReply error_reply = 5;
    WSSignaling ws_signaling = 6;
    // RTCFileQuote rtc_file_quote = 7;
    // RTCFileContent rtc_file_content = 8;
    FileDemandRequest file_demand_request = 10;
    FileDemandBroadcast file_demand_broadcast = 11;
    FeePoolCreate fee_pool_create = 12;
    FeePoolSign fee_pool_sign = 13;
    FeePoolBaseTx fee_pool_base_tx = 14;
    FeePoolUpdate fee_pool_update = 15;
    FeePoolUpdateNotify fee_pool_update_notify = 16;
    FeePoolClose fee_pool_close = 17;
    FeePoolStatusQuery fee_pool_status_query = 18;
    FeePoolStatusResponse fee_pool_status_response = 19;
    FeePoolListQuery fee_pool_list_query = 20;
    FeePoolListResponse fee_pool_list_response = 21;
  }
}

// ------------------ 控制与通用业务消息 ------------------

message ErrorReply {
  string error_code = 1; // 字符串形式的错误码
  string detail = 2;
}

message WSSignaling {
  string signaling_type = 1; // offer, candidate
  bytes data = 2;            // SDP / ICE / 其他
}

// ------------------ 费用池 / 支付 ------------------

// 费用池创建消息
message FeePoolCreate {
  bytes spend_tx = 1;                 // 花费交易
  uint64 input_amount = 2;            // 输入总金额
  bytes client_signature = 3;         // 客户端签名
}

// 费用池签名消息，服务器返回给客户端
message FeePoolSign {
  bytes spend_txid = 1;               // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
  bytes server_signature = 2;         // 服务器签名（为空表示拒绝）
  string error_message = 3;           // 错误信息（为空表示批准）
}

// 发送基础交易消息，客户端返回给服务器
message FeePoolBaseTx {
  bytes spend_txid = 1;                // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
  bytes base_tx = 2;                  // 基础交易
  bytes client_signature = 3;         // 客户端对基础交易的签名
}

// 费用池更新通知消息（服务器发送给客户端）
message FeePoolUpdateNotify {
  bytes spend_txid = 1;                // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
  uint32 sequence_number = 2;         // 序列号
  uint64 server_amount = 3;           // 服务器金额
  uint64 fee = 4;                     // 交易费用
}

// 费用池更新消息，在客户端主动关闭的时候，服务器也会发送给客户端，平时都是客户端发送给服务器，回应 FeePoolUpdateNotify
message FeePoolUpdate {
  bytes spend_txid = 1;                // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
  uint32 sequence_number = 2;         // 序列号，如果 sequence_number 为 ffffffff，则表示是关闭费用池
  uint64 server_amount = 3;           // 服务器金额
  uint64 fee = 4;                     // 交易费用
  bytes signature = 5;                // 签名
}

// 费用池关闭消息，双方都可以发送
message FeePoolClose {
  bytes spend_txid = 1;                // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
  uint64 server_amount = 2;           // 服务器金额
  uint64 fee = 3;                     // 交易费用
  bytes signature = 4;                // 签名
}

// 费用池状态查询消息
message FeePoolStatusQuery {
  bytes spend_txid = 1;                // 花费交易ID（可选，为空则查询客户端所有费用池）
}

// 费用池状态响应消息
message FeePoolStatusResponse {
  bytes spend_txid = 1;                // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
  string status = 2;                  // 状态：pending, signed, active, expired, closed, error
  uint64 spend_amount = 3;
  uint64 server_amount = 4;           // 服务器当前金额
  uint64 spend_tx_fee = 5;                     // 交易费用
  uint32 sequence_number = 6;         // 当前序列号
  google.protobuf.Timestamp created_at = 7;     // 创建时间
  google.protobuf.Timestamp expires_at = 8;     // 过期时间（如果适用）
  string error_reason = 9;            // 错误原因（状态为error时）
  uint64 unspent_update_amount = 10;  // 未花费 update 金额
  bool is_close = 11;                 // 是否关闭
  bool is_settled = 12;                // 是否结算
  string base_tx_hex = 13;            // 基础交易的十六进制表示
  string spend_tx_hex = 14;           // 花费交易的十六进制表示
}

// 费用池列表查询消息
message FeePoolListQuery {
  uint32 limit = 1;                  // 每页数量
  uint32 page = 2;                   // 页码（从1开始）
}

// 费用池列表项目
message FeePoolListItem {
  bytes spend_tx_id = 1;             // 花费交易ID（32 字节，小端序；十六进制展示为大端序）
  string status = 2;                 // 状态：pending, signed, active, expired, closed, error
  google.protobuf.Timestamp create_at = 3; // 创建时间
  bool is_settled = 4;               // 是否结算（是否关闭了费用池，要回了余额）
  uint64 remaining_service_seconds = 5; // 剩余服务时间（秒）
  bool is_close = 6;                 // 是否关闭
  uint64 unspent_update_amount = 7;  // 未花费 update 金额
  string base_tx_hex = 8;            // 基础交易的十六进制表示
  string spend_tx_hex = 9;           // 花费交易的十六进制表示
  uint64 spend_tx_fee = 10;          // 花费交易费用
}

// 费用池列表响应消息
message FeePoolListResponse {
  repeated FeePoolListItem items = 1; // 费用池列表
  uint32 total_count = 2;            // 总数量
  uint32 total_pages = 3;            // 总页数
}

// ------------------ 文件相关 ------------------

// 文件需求请求消息
message FileDemandRequest {
  bytes file_hash = 1;                // 文件哈希
}

// 文件需求广播消息
message FileDemandBroadcast {
  bytes file_hash = 1;                // 文件哈希
}

// ------------------ RTC 文件报价/内容 ------------------

// message RTCFileQuote {
//   bytes FileHash = 1;
//   repeated string FileName = 2;
//   uint64 FileSize = 3;
//   uint64 MetadataPrice = 4;
//   uint64 Price = 5;
// }

// message RTCFileContent {
//   bytes FileHash = 1;
//   bytes FileContent = 2;
// }

// ------------------ 广播与交易 ------------------
