// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.26.1
// source: message.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MsgKind int32

const (
	MsgKind_KIND_UNSPECIFIED  MsgKind = 0
	MsgKind_KIND_ERROR        MsgKind = 1
	MsgKind_KIND_WS_SIGNALING MsgKind = 2
	// KIND_RTC_FILE_QUOTE = 3;
	// KIND_RTC_FILE_CONTENT = 4;
	MsgKind_KIND_FILE_DEMAND_REQUEST      MsgKind = 10 // 文件需求请求
	MsgKind_KIND_FILE_DEMAND_BROADCAST    MsgKind = 11 // 文件需求广播
	MsgKind_KIND_FEE_POOL_CREATE          MsgKind = 12 // 费用池创建
	MsgKind_KIND_FEE_POOL_SIGN            MsgKind = 13 // 费用池签名
	MsgKind_KIND_FEE_POOL_BASE_TX         MsgKind = 14 // 发送基础交易
	MsgKind_KIND_FEE_POOL_UPDATE          MsgKind = 15 // 费用池更新
	MsgKind_KIND_FEE_POOL_UPDATE_NOTIFY   MsgKind = 16 // 费用池更新通知（服务器发送给客户端）
	MsgKind_KIND_FEE_POOL_CLOSE           MsgKind = 17 // 费用池关闭
	MsgKind_KIND_FEE_POOL_STATUS_QUERY    MsgKind = 18 // 费用池状态查询
	MsgKind_KIND_FEE_POOL_STATUS_RESPONSE MsgKind = 19 // 费用池状态响应
	MsgKind_KIND_FEE_POOL_LIST_QUERY      MsgKind = 20 // 费用池列表查询
	MsgKind_KIND_FEE_POOL_LIST_RESPONSE   MsgKind = 21 // 费用池列表响应
)

// Enum value maps for MsgKind.
var (
	MsgKind_name = map[int32]string{
		0:  "KIND_UNSPECIFIED",
		1:  "KIND_ERROR",
		2:  "KIND_WS_SIGNALING",
		10: "KIND_FILE_DEMAND_REQUEST",
		11: "KIND_FILE_DEMAND_BROADCAST",
		12: "KIND_FEE_POOL_CREATE",
		13: "KIND_FEE_POOL_SIGN",
		14: "KIND_FEE_POOL_BASE_TX",
		15: "KIND_FEE_POOL_UPDATE",
		16: "KIND_FEE_POOL_UPDATE_NOTIFY",
		17: "KIND_FEE_POOL_CLOSE",
		18: "KIND_FEE_POOL_STATUS_QUERY",
		19: "KIND_FEE_POOL_STATUS_RESPONSE",
		20: "KIND_FEE_POOL_LIST_QUERY",
		21: "KIND_FEE_POOL_LIST_RESPONSE",
	}
	MsgKind_value = map[string]int32{
		"KIND_UNSPECIFIED":              0,
		"KIND_ERROR":                    1,
		"KIND_WS_SIGNALING":             2,
		"KIND_FILE_DEMAND_REQUEST":      10,
		"KIND_FILE_DEMAND_BROADCAST":    11,
		"KIND_FEE_POOL_CREATE":          12,
		"KIND_FEE_POOL_SIGN":            13,
		"KIND_FEE_POOL_BASE_TX":         14,
		"KIND_FEE_POOL_UPDATE":          15,
		"KIND_FEE_POOL_UPDATE_NOTIFY":   16,
		"KIND_FEE_POOL_CLOSE":           17,
		"KIND_FEE_POOL_STATUS_QUERY":    18,
		"KIND_FEE_POOL_STATUS_RESPONSE": 19,
		"KIND_FEE_POOL_LIST_QUERY":      20,
		"KIND_FEE_POOL_LIST_RESPONSE":   21,
	}
)

func (x MsgKind) Enum() *MsgKind {
	p := new(MsgKind)
	*p = x
	return p
}

func (x MsgKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgKind) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (MsgKind) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x MsgKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgKind.Descriptor instead.
func (MsgKind) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          MsgKind                `protobuf:"varint,1,opt,name=kind,proto3,enum=api.webrtc.v1.MsgKind" json:"kind,omitempty"`
	MessageId     string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`             // 全局唯一 ID
	CorrelationId string                 `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // 关联请求/响应 ID
	Ts            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`                                            // 发送时间
	FromPubkey    []byte                 `protobuf:"bytes,5,opt,name=from_pubkey,json=fromPubkey,proto3" json:"from_pubkey,omitempty"`          // 发送方公钥
	ToPubkey      []byte                 `protobuf:"bytes,6,opt,name=to_pubkey,json=toPubkey,proto3" json:"to_pubkey,omitempty"`                // 接收方公钥
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetKind() MsgKind {
	if x != nil {
		return x.Kind
	}
	return MsgKind_KIND_UNSPECIFIED
}

func (x *Header) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Header) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *Header) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Header) GetFromPubkey() []byte {
	if x != nil {
		return x.FromPubkey
	}
	return nil
}

func (x *Header) GetToPubkey() []byte {
	if x != nil {
		return x.ToPubkey
	}
	return nil
}

type Envelope struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Version uint32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"` // 协议版本
	Header  *Header                `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// 安全字段（必填）
	Signature     []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureAlgo string `protobuf:"bytes,4,opt,name=signature_algo,json=signatureAlgo,proto3" json:"signature_algo,omitempty"` // 如 "ECDSA_P256_SHA256"
	// Types that are valid to be assigned to Payload:
	//
	//	*Envelope_ErrorReply
	//	*Envelope_WsSignaling
	//	*Envelope_FileDemandRequest
	//	*Envelope_FileDemandBroadcast
	//	*Envelope_FeePoolCreate
	//	*Envelope_FeePoolSign
	//	*Envelope_FeePoolBaseTx
	//	*Envelope_FeePoolUpdate
	//	*Envelope_FeePoolUpdateNotify
	//	*Envelope_FeePoolClose
	//	*Envelope_FeePoolStatusQuery
	//	*Envelope_FeePoolStatusResponse
	//	*Envelope_FeePoolListQuery
	//	*Envelope_FeePoolListResponse
	Payload       isEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *Envelope) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Envelope) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Envelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Envelope) GetSignatureAlgo() string {
	if x != nil {
		return x.SignatureAlgo
	}
	return ""
}

func (x *Envelope) GetPayload() isEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Envelope) GetErrorReply() *ErrorReply {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ErrorReply); ok {
			return x.ErrorReply
		}
	}
	return nil
}

func (x *Envelope) GetWsSignaling() *WSSignaling {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_WsSignaling); ok {
			return x.WsSignaling
		}
	}
	return nil
}

func (x *Envelope) GetFileDemandRequest() *FileDemandRequest {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FileDemandRequest); ok {
			return x.FileDemandRequest
		}
	}
	return nil
}

func (x *Envelope) GetFileDemandBroadcast() *FileDemandBroadcast {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FileDemandBroadcast); ok {
			return x.FileDemandBroadcast
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolCreate() *FeePoolCreate {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolCreate); ok {
			return x.FeePoolCreate
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolSign() *FeePoolSign {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolSign); ok {
			return x.FeePoolSign
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolBaseTx() *FeePoolBaseTx {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolBaseTx); ok {
			return x.FeePoolBaseTx
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolUpdate() *FeePoolUpdate {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolUpdate); ok {
			return x.FeePoolUpdate
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolUpdateNotify() *FeePoolUpdateNotify {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolUpdateNotify); ok {
			return x.FeePoolUpdateNotify
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolClose() *FeePoolClose {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolClose); ok {
			return x.FeePoolClose
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolStatusQuery() *FeePoolStatusQuery {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolStatusQuery); ok {
			return x.FeePoolStatusQuery
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolStatusResponse() *FeePoolStatusResponse {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolStatusResponse); ok {
			return x.FeePoolStatusResponse
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolListQuery() *FeePoolListQuery {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolListQuery); ok {
			return x.FeePoolListQuery
		}
	}
	return nil
}

func (x *Envelope) GetFeePoolListResponse() *FeePoolListResponse {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_FeePoolListResponse); ok {
			return x.FeePoolListResponse
		}
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_ErrorReply struct {
	ErrorReply *ErrorReply `protobuf:"bytes,5,opt,name=error_reply,json=errorReply,proto3,oneof"`
}

type Envelope_WsSignaling struct {
	WsSignaling *WSSignaling `protobuf:"bytes,6,opt,name=ws_signaling,json=wsSignaling,proto3,oneof"`
}

type Envelope_FileDemandRequest struct {
	// RTCFileQuote rtc_file_quote = 7;
	// RTCFileContent rtc_file_content = 8;
	FileDemandRequest *FileDemandRequest `protobuf:"bytes,10,opt,name=file_demand_request,json=fileDemandRequest,proto3,oneof"`
}

type Envelope_FileDemandBroadcast struct {
	FileDemandBroadcast *FileDemandBroadcast `protobuf:"bytes,11,opt,name=file_demand_broadcast,json=fileDemandBroadcast,proto3,oneof"`
}

type Envelope_FeePoolCreate struct {
	FeePoolCreate *FeePoolCreate `protobuf:"bytes,12,opt,name=fee_pool_create,json=feePoolCreate,proto3,oneof"`
}

type Envelope_FeePoolSign struct {
	FeePoolSign *FeePoolSign `protobuf:"bytes,13,opt,name=fee_pool_sign,json=feePoolSign,proto3,oneof"`
}

type Envelope_FeePoolBaseTx struct {
	FeePoolBaseTx *FeePoolBaseTx `protobuf:"bytes,14,opt,name=fee_pool_base_tx,json=feePoolBaseTx,proto3,oneof"`
}

type Envelope_FeePoolUpdate struct {
	FeePoolUpdate *FeePoolUpdate `protobuf:"bytes,15,opt,name=fee_pool_update,json=feePoolUpdate,proto3,oneof"`
}

type Envelope_FeePoolUpdateNotify struct {
	FeePoolUpdateNotify *FeePoolUpdateNotify `protobuf:"bytes,16,opt,name=fee_pool_update_notify,json=feePoolUpdateNotify,proto3,oneof"`
}

type Envelope_FeePoolClose struct {
	FeePoolClose *FeePoolClose `protobuf:"bytes,17,opt,name=fee_pool_close,json=feePoolClose,proto3,oneof"`
}

type Envelope_FeePoolStatusQuery struct {
	FeePoolStatusQuery *FeePoolStatusQuery `protobuf:"bytes,18,opt,name=fee_pool_status_query,json=feePoolStatusQuery,proto3,oneof"`
}

type Envelope_FeePoolStatusResponse struct {
	FeePoolStatusResponse *FeePoolStatusResponse `protobuf:"bytes,19,opt,name=fee_pool_status_response,json=feePoolStatusResponse,proto3,oneof"`
}

type Envelope_FeePoolListQuery struct {
	FeePoolListQuery *FeePoolListQuery `protobuf:"bytes,20,opt,name=fee_pool_list_query,json=feePoolListQuery,proto3,oneof"`
}

type Envelope_FeePoolListResponse struct {
	FeePoolListResponse *FeePoolListResponse `protobuf:"bytes,21,opt,name=fee_pool_list_response,json=feePoolListResponse,proto3,oneof"`
}

func (*Envelope_ErrorReply) isEnvelope_Payload() {}

func (*Envelope_WsSignaling) isEnvelope_Payload() {}

func (*Envelope_FileDemandRequest) isEnvelope_Payload() {}

func (*Envelope_FileDemandBroadcast) isEnvelope_Payload() {}

func (*Envelope_FeePoolCreate) isEnvelope_Payload() {}

func (*Envelope_FeePoolSign) isEnvelope_Payload() {}

func (*Envelope_FeePoolBaseTx) isEnvelope_Payload() {}

func (*Envelope_FeePoolUpdate) isEnvelope_Payload() {}

func (*Envelope_FeePoolUpdateNotify) isEnvelope_Payload() {}

func (*Envelope_FeePoolClose) isEnvelope_Payload() {}

func (*Envelope_FeePoolStatusQuery) isEnvelope_Payload() {}

func (*Envelope_FeePoolStatusResponse) isEnvelope_Payload() {}

func (*Envelope_FeePoolListQuery) isEnvelope_Payload() {}

func (*Envelope_FeePoolListResponse) isEnvelope_Payload() {}

type ErrorReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     string                 `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // 字符串形式的错误码
	Detail        string                 `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorReply) Reset() {
	*x = ErrorReply{}
	mi := &file_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorReply) ProtoMessage() {}

func (x *ErrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorReply.ProtoReflect.Descriptor instead.
func (*ErrorReply) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorReply) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ErrorReply) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type WSSignaling struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SignalingType string                 `protobuf:"bytes,1,opt,name=signaling_type,json=signalingType,proto3" json:"signaling_type,omitempty"` // offer, candidate
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                        // SDP / ICE / 其他
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WSSignaling) Reset() {
	*x = WSSignaling{}
	mi := &file_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WSSignaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WSSignaling) ProtoMessage() {}

func (x *WSSignaling) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WSSignaling.ProtoReflect.Descriptor instead.
func (*WSSignaling) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *WSSignaling) GetSignalingType() string {
	if x != nil {
		return x.SignalingType
	}
	return ""
}

func (x *WSSignaling) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 费用池创建消息
type FeePoolCreate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpendTx         []byte                 `protobuf:"bytes,1,opt,name=spend_tx,json=spendTx,proto3" json:"spend_tx,omitempty"`                         // 花费交易
	InputAmount     uint64                 `protobuf:"varint,2,opt,name=input_amount,json=inputAmount,proto3" json:"input_amount,omitempty"`            // 输入总金额
	ClientSignature []byte                 `protobuf:"bytes,3,opt,name=client_signature,json=clientSignature,proto3" json:"client_signature,omitempty"` // 客户端签名
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FeePoolCreate) Reset() {
	*x = FeePoolCreate{}
	mi := &file_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolCreate) ProtoMessage() {}

func (x *FeePoolCreate) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolCreate.ProtoReflect.Descriptor instead.
func (*FeePoolCreate) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *FeePoolCreate) GetSpendTx() []byte {
	if x != nil {
		return x.SpendTx
	}
	return nil
}

func (x *FeePoolCreate) GetInputAmount() uint64 {
	if x != nil {
		return x.InputAmount
	}
	return 0
}

func (x *FeePoolCreate) GetClientSignature() []byte {
	if x != nil {
		return x.ClientSignature
	}
	return nil
}

// 费用池签名消息，服务器返回给客户端
type FeePoolSign struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpendTxid       []byte                 `protobuf:"bytes,1,opt,name=spend_txid,json=spendTxid,proto3" json:"spend_txid,omitempty"`                   // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
	ServerSignature []byte                 `protobuf:"bytes,2,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"` // 服务器签名（为空表示拒绝）
	ErrorMessage    string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`          // 错误信息（为空表示批准）
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FeePoolSign) Reset() {
	*x = FeePoolSign{}
	mi := &file_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolSign) ProtoMessage() {}

func (x *FeePoolSign) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolSign.ProtoReflect.Descriptor instead.
func (*FeePoolSign) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *FeePoolSign) GetSpendTxid() []byte {
	if x != nil {
		return x.SpendTxid
	}
	return nil
}

func (x *FeePoolSign) GetServerSignature() []byte {
	if x != nil {
		return x.ServerSignature
	}
	return nil
}

func (x *FeePoolSign) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 发送基础交易消息，客户端返回给服务器
type FeePoolBaseTx struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpendTxid       []byte                 `protobuf:"bytes,1,opt,name=spend_txid,json=spendTxid,proto3" json:"spend_txid,omitempty"`                   // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
	BaseTx          []byte                 `protobuf:"bytes,2,opt,name=base_tx,json=baseTx,proto3" json:"base_tx,omitempty"`                            // 基础交易
	ClientSignature []byte                 `protobuf:"bytes,3,opt,name=client_signature,json=clientSignature,proto3" json:"client_signature,omitempty"` // 客户端对基础交易的签名
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FeePoolBaseTx) Reset() {
	*x = FeePoolBaseTx{}
	mi := &file_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolBaseTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolBaseTx) ProtoMessage() {}

func (x *FeePoolBaseTx) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolBaseTx.ProtoReflect.Descriptor instead.
func (*FeePoolBaseTx) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *FeePoolBaseTx) GetSpendTxid() []byte {
	if x != nil {
		return x.SpendTxid
	}
	return nil
}

func (x *FeePoolBaseTx) GetBaseTx() []byte {
	if x != nil {
		return x.BaseTx
	}
	return nil
}

func (x *FeePoolBaseTx) GetClientSignature() []byte {
	if x != nil {
		return x.ClientSignature
	}
	return nil
}

// 费用池更新通知消息（服务器发送给客户端）
type FeePoolUpdateNotify struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SpendTxid      []byte                 `protobuf:"bytes,1,opt,name=spend_txid,json=spendTxid,proto3" json:"spend_txid,omitempty"`                 // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
	SequenceNumber uint32                 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"` // 序列号
	ServerAmount   uint64                 `protobuf:"varint,3,opt,name=server_amount,json=serverAmount,proto3" json:"server_amount,omitempty"`       // 服务器金额
	Fee            uint64                 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`                                             // 交易费用
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FeePoolUpdateNotify) Reset() {
	*x = FeePoolUpdateNotify{}
	mi := &file_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolUpdateNotify) ProtoMessage() {}

func (x *FeePoolUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolUpdateNotify.ProtoReflect.Descriptor instead.
func (*FeePoolUpdateNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *FeePoolUpdateNotify) GetSpendTxid() []byte {
	if x != nil {
		return x.SpendTxid
	}
	return nil
}

func (x *FeePoolUpdateNotify) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *FeePoolUpdateNotify) GetServerAmount() uint64 {
	if x != nil {
		return x.ServerAmount
	}
	return 0
}

func (x *FeePoolUpdateNotify) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

// 费用池更新消息，在客户端主动关闭的时候，服务器也会发送给客户端，平时都是客户端发送给服务器，回应 FeePoolUpdateNotify
type FeePoolUpdate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SpendTxid      []byte                 `protobuf:"bytes,1,opt,name=spend_txid,json=spendTxid,proto3" json:"spend_txid,omitempty"`                 // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
	SequenceNumber uint32                 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"` // 序列号，如果 sequence_number 为 ffffffff，则表示是关闭费用池
	ServerAmount   uint64                 `protobuf:"varint,3,opt,name=server_amount,json=serverAmount,proto3" json:"server_amount,omitempty"`       // 服务器金额
	Fee            uint64                 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`                                             // 交易费用
	Signature      []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`                                  // 签名
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FeePoolUpdate) Reset() {
	*x = FeePoolUpdate{}
	mi := &file_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolUpdate) ProtoMessage() {}

func (x *FeePoolUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolUpdate.ProtoReflect.Descriptor instead.
func (*FeePoolUpdate) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *FeePoolUpdate) GetSpendTxid() []byte {
	if x != nil {
		return x.SpendTxid
	}
	return nil
}

func (x *FeePoolUpdate) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *FeePoolUpdate) GetServerAmount() uint64 {
	if x != nil {
		return x.ServerAmount
	}
	return 0
}

func (x *FeePoolUpdate) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *FeePoolUpdate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// 费用池关闭消息，双方都可以发送
type FeePoolClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpendTxid     []byte                 `protobuf:"bytes,1,opt,name=spend_txid,json=spendTxid,proto3" json:"spend_txid,omitempty"`           // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
	ServerAmount  uint64                 `protobuf:"varint,2,opt,name=server_amount,json=serverAmount,proto3" json:"server_amount,omitempty"` // 服务器金额
	Fee           uint64                 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`                                       // 交易费用
	Signature     []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`                            // 签名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeePoolClose) Reset() {
	*x = FeePoolClose{}
	mi := &file_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolClose) ProtoMessage() {}

func (x *FeePoolClose) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolClose.ProtoReflect.Descriptor instead.
func (*FeePoolClose) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *FeePoolClose) GetSpendTxid() []byte {
	if x != nil {
		return x.SpendTxid
	}
	return nil
}

func (x *FeePoolClose) GetServerAmount() uint64 {
	if x != nil {
		return x.ServerAmount
	}
	return 0
}

func (x *FeePoolClose) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *FeePoolClose) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// 费用池状态查询消息
type FeePoolStatusQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpendTxid     []byte                 `protobuf:"bytes,1,opt,name=spend_txid,json=spendTxid,proto3" json:"spend_txid,omitempty"` // 花费交易ID（可选，为空则查询客户端所有费用池）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeePoolStatusQuery) Reset() {
	*x = FeePoolStatusQuery{}
	mi := &file_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolStatusQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolStatusQuery) ProtoMessage() {}

func (x *FeePoolStatusQuery) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolStatusQuery.ProtoReflect.Descriptor instead.
func (*FeePoolStatusQuery) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *FeePoolStatusQuery) GetSpendTxid() []byte {
	if x != nil {
		return x.SpendTxid
	}
	return nil
}

// 费用池状态响应消息
type FeePoolStatusResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SpendTxid           []byte                 `protobuf:"bytes,1,opt,name=spend_txid,json=spendTxid,proto3" json:"spend_txid,omitempty"` // 花费交易ID（32 字节，小端序；十六进制展示为大端序；必填且不可为空）
	Status              string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                        // 状态：pending, signed, active, expired, closed, error
	SpendAmount         uint64                 `protobuf:"varint,3,opt,name=spend_amount,json=spendAmount,proto3" json:"spend_amount,omitempty"`
	ServerAmount        uint64                 `protobuf:"varint,4,opt,name=server_amount,json=serverAmount,proto3" json:"server_amount,omitempty"`                         // 服务器当前金额
	Fee                 uint64                 `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`                                                               // 交易费用
	SequenceNumber      uint32                 `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`                   // 当前序列号
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                   // 创建时间
	ExpiresAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`                                   // 过期时间（如果适用）
	ErrorReason         string                 `protobuf:"bytes,9,opt,name=error_reason,json=errorReason,proto3" json:"error_reason,omitempty"`                             // 错误原因（状态为error时）
	UnspentUpdateAmount uint64                 `protobuf:"varint,10,opt,name=unspent_update_amount,json=unspentUpdateAmount,proto3" json:"unspent_update_amount,omitempty"` // 未花费 update 金额
	IsClose             bool                   `protobuf:"varint,11,opt,name=is_close,json=isClose,proto3" json:"is_close,omitempty"`                                       // 是否关闭
	IsSettled           bool                   `protobuf:"varint,12,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty"`                                 // 是否结算
	BaseTxHex           string                 `protobuf:"bytes,13,opt,name=base_tx_hex,json=baseTxHex,proto3" json:"base_tx_hex,omitempty"`                                // 基础交易的十六进制表示
	SpendTxHex          string                 `protobuf:"bytes,14,opt,name=spend_tx_hex,json=spendTxHex,proto3" json:"spend_tx_hex,omitempty"`                             // 花费交易的十六进制表示
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FeePoolStatusResponse) Reset() {
	*x = FeePoolStatusResponse{}
	mi := &file_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolStatusResponse) ProtoMessage() {}

func (x *FeePoolStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolStatusResponse.ProtoReflect.Descriptor instead.
func (*FeePoolStatusResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *FeePoolStatusResponse) GetSpendTxid() []byte {
	if x != nil {
		return x.SpendTxid
	}
	return nil
}

func (x *FeePoolStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FeePoolStatusResponse) GetSpendAmount() uint64 {
	if x != nil {
		return x.SpendAmount
	}
	return 0
}

func (x *FeePoolStatusResponse) GetServerAmount() uint64 {
	if x != nil {
		return x.ServerAmount
	}
	return 0
}

func (x *FeePoolStatusResponse) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *FeePoolStatusResponse) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *FeePoolStatusResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeePoolStatusResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *FeePoolStatusResponse) GetErrorReason() string {
	if x != nil {
		return x.ErrorReason
	}
	return ""
}

func (x *FeePoolStatusResponse) GetUnspentUpdateAmount() uint64 {
	if x != nil {
		return x.UnspentUpdateAmount
	}
	return 0
}

func (x *FeePoolStatusResponse) GetIsClose() bool {
	if x != nil {
		return x.IsClose
	}
	return false
}

func (x *FeePoolStatusResponse) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *FeePoolStatusResponse) GetBaseTxHex() string {
	if x != nil {
		return x.BaseTxHex
	}
	return ""
}

func (x *FeePoolStatusResponse) GetSpendTxHex() string {
	if x != nil {
		return x.SpendTxHex
	}
	return ""
}

// 费用池列表查询消息
type FeePoolListQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         uint32                 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"` // 每页数量
	Page          uint32                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`   // 页码（从1开始）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeePoolListQuery) Reset() {
	*x = FeePoolListQuery{}
	mi := &file_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolListQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolListQuery) ProtoMessage() {}

func (x *FeePoolListQuery) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolListQuery.ProtoReflect.Descriptor instead.
func (*FeePoolListQuery) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *FeePoolListQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FeePoolListQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// 费用池列表项目
type FeePoolListItem struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	SpendTxId               []byte                 `protobuf:"bytes,1,opt,name=spend_tx_id,json=spendTxId,proto3" json:"spend_tx_id,omitempty"`                                            // 花费交易ID（32 字节，小端序；十六进制展示为大端序）
	Status                  string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                                     // 状态：pending, signed, active, expired, closed, error
	CreateAt                *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                                                 // 创建时间
	IsSettled               bool                   `protobuf:"varint,4,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty"`                                             // 是否结算（是否关闭了费用池，要回了余额）
	RemainingServiceSeconds uint64                 `protobuf:"varint,5,opt,name=remaining_service_seconds,json=remainingServiceSeconds,proto3" json:"remaining_service_seconds,omitempty"` // 剩余服务时间（秒）
	IsClose                 bool                   `protobuf:"varint,6,opt,name=is_close,json=isClose,proto3" json:"is_close,omitempty"`                                                   // 是否关闭
	UnspentUpdateAmount     uint64                 `protobuf:"varint,7,opt,name=unspent_update_amount,json=unspentUpdateAmount,proto3" json:"unspent_update_amount,omitempty"`             // 未花费 update 金额
	BaseTxHex               string                 `protobuf:"bytes,8,opt,name=base_tx_hex,json=baseTxHex,proto3" json:"base_tx_hex,omitempty"`                                            // 基础交易的十六进制表示
	SpendTxHex              string                 `protobuf:"bytes,9,opt,name=spend_tx_hex,json=spendTxHex,proto3" json:"spend_tx_hex,omitempty"`                                         // 花费交易的十六进制表示
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *FeePoolListItem) Reset() {
	*x = FeePoolListItem{}
	mi := &file_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolListItem) ProtoMessage() {}

func (x *FeePoolListItem) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolListItem.ProtoReflect.Descriptor instead.
func (*FeePoolListItem) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *FeePoolListItem) GetSpendTxId() []byte {
	if x != nil {
		return x.SpendTxId
	}
	return nil
}

func (x *FeePoolListItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FeePoolListItem) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *FeePoolListItem) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *FeePoolListItem) GetRemainingServiceSeconds() uint64 {
	if x != nil {
		return x.RemainingServiceSeconds
	}
	return 0
}

func (x *FeePoolListItem) GetIsClose() bool {
	if x != nil {
		return x.IsClose
	}
	return false
}

func (x *FeePoolListItem) GetUnspentUpdateAmount() uint64 {
	if x != nil {
		return x.UnspentUpdateAmount
	}
	return 0
}

func (x *FeePoolListItem) GetBaseTxHex() string {
	if x != nil {
		return x.BaseTxHex
	}
	return ""
}

func (x *FeePoolListItem) GetSpendTxHex() string {
	if x != nil {
		return x.SpendTxHex
	}
	return ""
}

// 费用池列表响应消息
type FeePoolListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*FeePoolListItem     `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`                              // 费用池列表
	TotalCount    uint32                 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数量
	TotalPages    uint32                 `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"` // 总页数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeePoolListResponse) Reset() {
	*x = FeePoolListResponse{}
	mi := &file_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeePoolListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePoolListResponse) ProtoMessage() {}

func (x *FeePoolListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePoolListResponse.ProtoReflect.Descriptor instead.
func (*FeePoolListResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *FeePoolListResponse) GetItems() []*FeePoolListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FeePoolListResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FeePoolListResponse) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// 文件需求请求消息
type FileDemandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      []byte                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"` // 文件哈希
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDemandRequest) Reset() {
	*x = FileDemandRequest{}
	mi := &file_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDemandRequest) ProtoMessage() {}

func (x *FileDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDemandRequest.ProtoReflect.Descriptor instead.
func (*FileDemandRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *FileDemandRequest) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

// 文件需求广播消息
type FileDemandBroadcast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      []byte                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"` // 文件哈希
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDemandBroadcast) Reset() {
	*x = FileDemandBroadcast{}
	mi := &file_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDemandBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDemandBroadcast) ProtoMessage() {}

func (x *FileDemandBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDemandBroadcast.ProtoReflect.Descriptor instead.
func (*FileDemandBroadcast) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *FileDemandBroadcast) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

var File_message_proto protoreflect.FileDescriptor

const file_message_proto_rawDesc = "" +
	"\n" +
	"\rmessage.proto\x12\rapi.webrtc.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xe4\x01\n" +
	"\x06Header\x12*\n" +
	"\x04kind\x18\x01 \x01(\x0e2\x16.api.webrtc.v1.MsgKindR\x04kind\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12%\n" +
	"\x0ecorrelation_id\x18\x03 \x01(\tR\rcorrelationId\x12*\n" +
	"\x02ts\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x02ts\x12\x1f\n" +
	"\vfrom_pubkey\x18\x05 \x01(\fR\n" +
	"fromPubkey\x12\x1b\n" +
	"\tto_pubkey\x18\x06 \x01(\fR\btoPubkey\"\xf1\t\n" +
	"\bEnvelope\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12-\n" +
	"\x06header\x18\x02 \x01(\v2\x15.api.webrtc.v1.HeaderR\x06header\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x12%\n" +
	"\x0esignature_algo\x18\x04 \x01(\tR\rsignatureAlgo\x12<\n" +
	"\verror_reply\x18\x05 \x01(\v2\x19.api.webrtc.v1.ErrorReplyH\x00R\n" +
	"errorReply\x12?\n" +
	"\fws_signaling\x18\x06 \x01(\v2\x1a.api.webrtc.v1.WSSignalingH\x00R\vwsSignaling\x12R\n" +
	"\x13file_demand_request\x18\n" +
	" \x01(\v2 .api.webrtc.v1.FileDemandRequestH\x00R\x11fileDemandRequest\x12X\n" +
	"\x15file_demand_broadcast\x18\v \x01(\v2\".api.webrtc.v1.FileDemandBroadcastH\x00R\x13fileDemandBroadcast\x12F\n" +
	"\x0ffee_pool_create\x18\f \x01(\v2\x1c.api.webrtc.v1.FeePoolCreateH\x00R\rfeePoolCreate\x12@\n" +
	"\rfee_pool_sign\x18\r \x01(\v2\x1a.api.webrtc.v1.FeePoolSignH\x00R\vfeePoolSign\x12G\n" +
	"\x10fee_pool_base_tx\x18\x0e \x01(\v2\x1c.api.webrtc.v1.FeePoolBaseTxH\x00R\rfeePoolBaseTx\x12F\n" +
	"\x0ffee_pool_update\x18\x0f \x01(\v2\x1c.api.webrtc.v1.FeePoolUpdateH\x00R\rfeePoolUpdate\x12Y\n" +
	"\x16fee_pool_update_notify\x18\x10 \x01(\v2\".api.webrtc.v1.FeePoolUpdateNotifyH\x00R\x13feePoolUpdateNotify\x12C\n" +
	"\x0efee_pool_close\x18\x11 \x01(\v2\x1b.api.webrtc.v1.FeePoolCloseH\x00R\ffeePoolClose\x12V\n" +
	"\x15fee_pool_status_query\x18\x12 \x01(\v2!.api.webrtc.v1.FeePoolStatusQueryH\x00R\x12feePoolStatusQuery\x12_\n" +
	"\x18fee_pool_status_response\x18\x13 \x01(\v2$.api.webrtc.v1.FeePoolStatusResponseH\x00R\x15feePoolStatusResponse\x12P\n" +
	"\x13fee_pool_list_query\x18\x14 \x01(\v2\x1f.api.webrtc.v1.FeePoolListQueryH\x00R\x10feePoolListQuery\x12Y\n" +
	"\x16fee_pool_list_response\x18\x15 \x01(\v2\".api.webrtc.v1.FeePoolListResponseH\x00R\x13feePoolListResponseB\t\n" +
	"\apayload\"C\n" +
	"\n" +
	"ErrorReply\x12\x1d\n" +
	"\n" +
	"error_code\x18\x01 \x01(\tR\terrorCode\x12\x16\n" +
	"\x06detail\x18\x02 \x01(\tR\x06detail\"H\n" +
	"\vWSSignaling\x12%\n" +
	"\x0esignaling_type\x18\x01 \x01(\tR\rsignalingType\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"x\n" +
	"\rFeePoolCreate\x12\x19\n" +
	"\bspend_tx\x18\x01 \x01(\fR\aspendTx\x12!\n" +
	"\finput_amount\x18\x02 \x01(\x04R\vinputAmount\x12)\n" +
	"\x10client_signature\x18\x03 \x01(\fR\x0fclientSignature\"|\n" +
	"\vFeePoolSign\x12\x1d\n" +
	"\n" +
	"spend_txid\x18\x01 \x01(\fR\tspendTxid\x12)\n" +
	"\x10server_signature\x18\x02 \x01(\fR\x0fserverSignature\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"r\n" +
	"\rFeePoolBaseTx\x12\x1d\n" +
	"\n" +
	"spend_txid\x18\x01 \x01(\fR\tspendTxid\x12\x17\n" +
	"\abase_tx\x18\x02 \x01(\fR\x06baseTx\x12)\n" +
	"\x10client_signature\x18\x03 \x01(\fR\x0fclientSignature\"\x94\x01\n" +
	"\x13FeePoolUpdateNotify\x12\x1d\n" +
	"\n" +
	"spend_txid\x18\x01 \x01(\fR\tspendTxid\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\rR\x0esequenceNumber\x12#\n" +
	"\rserver_amount\x18\x03 \x01(\x04R\fserverAmount\x12\x10\n" +
	"\x03fee\x18\x04 \x01(\x04R\x03fee\"\xac\x01\n" +
	"\rFeePoolUpdate\x12\x1d\n" +
	"\n" +
	"spend_txid\x18\x01 \x01(\fR\tspendTxid\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\rR\x0esequenceNumber\x12#\n" +
	"\rserver_amount\x18\x03 \x01(\x04R\fserverAmount\x12\x10\n" +
	"\x03fee\x18\x04 \x01(\x04R\x03fee\x12\x1c\n" +
	"\tsignature\x18\x05 \x01(\fR\tsignature\"\x82\x01\n" +
	"\fFeePoolClose\x12\x1d\n" +
	"\n" +
	"spend_txid\x18\x01 \x01(\fR\tspendTxid\x12#\n" +
	"\rserver_amount\x18\x02 \x01(\x04R\fserverAmount\x12\x10\n" +
	"\x03fee\x18\x03 \x01(\x04R\x03fee\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\"3\n" +
	"\x12FeePoolStatusQuery\x12\x1d\n" +
	"\n" +
	"spend_txid\x18\x01 \x01(\fR\tspendTxid\"\x9a\x04\n" +
	"\x15FeePoolStatusResponse\x12\x1d\n" +
	"\n" +
	"spend_txid\x18\x01 \x01(\fR\tspendTxid\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12!\n" +
	"\fspend_amount\x18\x03 \x01(\x04R\vspendAmount\x12#\n" +
	"\rserver_amount\x18\x04 \x01(\x04R\fserverAmount\x12\x10\n" +
	"\x03fee\x18\x05 \x01(\x04R\x03fee\x12'\n" +
	"\x0fsequence_number\x18\x06 \x01(\rR\x0esequenceNumber\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"expires_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\texpiresAt\x12!\n" +
	"\ferror_reason\x18\t \x01(\tR\verrorReason\x122\n" +
	"\x15unspent_update_amount\x18\n" +
	" \x01(\x04R\x13unspentUpdateAmount\x12\x19\n" +
	"\bis_close\x18\v \x01(\bR\aisClose\x12\x1d\n" +
	"\n" +
	"is_settled\x18\f \x01(\bR\tisSettled\x12\x1e\n" +
	"\vbase_tx_hex\x18\r \x01(\tR\tbaseTxHex\x12 \n" +
	"\fspend_tx_hex\x18\x0e \x01(\tR\n" +
	"spendTxHex\"<\n" +
	"\x10FeePoolListQuery\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\rR\x05limit\x12\x12\n" +
	"\x04page\x18\x02 \x01(\rR\x04page\"\xee\x02\n" +
	"\x0fFeePoolListItem\x12\x1e\n" +
	"\vspend_tx_id\x18\x01 \x01(\fR\tspendTxId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x127\n" +
	"\tcreate_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bcreateAt\x12\x1d\n" +
	"\n" +
	"is_settled\x18\x04 \x01(\bR\tisSettled\x12:\n" +
	"\x19remaining_service_seconds\x18\x05 \x01(\x04R\x17remainingServiceSeconds\x12\x19\n" +
	"\bis_close\x18\x06 \x01(\bR\aisClose\x122\n" +
	"\x15unspent_update_amount\x18\a \x01(\x04R\x13unspentUpdateAmount\x12\x1e\n" +
	"\vbase_tx_hex\x18\b \x01(\tR\tbaseTxHex\x12 \n" +
	"\fspend_tx_hex\x18\t \x01(\tR\n" +
	"spendTxHex\"\x8d\x01\n" +
	"\x13FeePoolListResponse\x124\n" +
	"\x05items\x18\x01 \x03(\v2\x1e.api.webrtc.v1.FeePoolListItemR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\rR\n" +
	"totalCount\x12\x1f\n" +
	"\vtotal_pages\x18\x03 \x01(\rR\n" +
	"totalPages\"0\n" +
	"\x11FileDemandRequest\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\fR\bfileHash\"2\n" +
	"\x13FileDemandBroadcast\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\fR\bfileHash*\xa7\x03\n" +
	"\aMsgKind\x12\x14\n" +
	"\x10KIND_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"KIND_ERROR\x10\x01\x12\x15\n" +
	"\x11KIND_WS_SIGNALING\x10\x02\x12\x1c\n" +
	"\x18KIND_FILE_DEMAND_REQUEST\x10\n" +
	"\x12\x1e\n" +
	"\x1aKIND_FILE_DEMAND_BROADCAST\x10\v\x12\x18\n" +
	"\x14KIND_FEE_POOL_CREATE\x10\f\x12\x16\n" +
	"\x12KIND_FEE_POOL_SIGN\x10\r\x12\x19\n" +
	"\x15KIND_FEE_POOL_BASE_TX\x10\x0e\x12\x18\n" +
	"\x14KIND_FEE_POOL_UPDATE\x10\x0f\x12\x1f\n" +
	"\x1bKIND_FEE_POOL_UPDATE_NOTIFY\x10\x10\x12\x17\n" +
	"\x13KIND_FEE_POOL_CLOSE\x10\x11\x12\x1e\n" +
	"\x1aKIND_FEE_POOL_STATUS_QUERY\x10\x12\x12!\n" +
	"\x1dKIND_FEE_POOL_STATUS_RESPONSE\x10\x13\x12\x1c\n" +
	"\x18KIND_FEE_POOL_LIST_QUERY\x10\x14\x12\x1f\n" +
	"\x1bKIND_FEE_POOL_LIST_RESPONSE\x10\x15B6Z4github.com/bitcoin-sv/KeyRTCServer/api_webrtc/gen/v1b\x06proto3"

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData []byte
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_proto_rawDesc), len(file_message_proto_rawDesc)))
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_message_proto_goTypes = []any{
	(MsgKind)(0),                  // 0: api.webrtc.v1.MsgKind
	(*Header)(nil),                // 1: api.webrtc.v1.Header
	(*Envelope)(nil),              // 2: api.webrtc.v1.Envelope
	(*ErrorReply)(nil),            // 3: api.webrtc.v1.ErrorReply
	(*WSSignaling)(nil),           // 4: api.webrtc.v1.WSSignaling
	(*FeePoolCreate)(nil),         // 5: api.webrtc.v1.FeePoolCreate
	(*FeePoolSign)(nil),           // 6: api.webrtc.v1.FeePoolSign
	(*FeePoolBaseTx)(nil),         // 7: api.webrtc.v1.FeePoolBaseTx
	(*FeePoolUpdateNotify)(nil),   // 8: api.webrtc.v1.FeePoolUpdateNotify
	(*FeePoolUpdate)(nil),         // 9: api.webrtc.v1.FeePoolUpdate
	(*FeePoolClose)(nil),          // 10: api.webrtc.v1.FeePoolClose
	(*FeePoolStatusQuery)(nil),    // 11: api.webrtc.v1.FeePoolStatusQuery
	(*FeePoolStatusResponse)(nil), // 12: api.webrtc.v1.FeePoolStatusResponse
	(*FeePoolListQuery)(nil),      // 13: api.webrtc.v1.FeePoolListQuery
	(*FeePoolListItem)(nil),       // 14: api.webrtc.v1.FeePoolListItem
	(*FeePoolListResponse)(nil),   // 15: api.webrtc.v1.FeePoolListResponse
	(*FileDemandRequest)(nil),     // 16: api.webrtc.v1.FileDemandRequest
	(*FileDemandBroadcast)(nil),   // 17: api.webrtc.v1.FileDemandBroadcast
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: api.webrtc.v1.Header.kind:type_name -> api.webrtc.v1.MsgKind
	18, // 1: api.webrtc.v1.Header.ts:type_name -> google.protobuf.Timestamp
	1,  // 2: api.webrtc.v1.Envelope.header:type_name -> api.webrtc.v1.Header
	3,  // 3: api.webrtc.v1.Envelope.error_reply:type_name -> api.webrtc.v1.ErrorReply
	4,  // 4: api.webrtc.v1.Envelope.ws_signaling:type_name -> api.webrtc.v1.WSSignaling
	16, // 5: api.webrtc.v1.Envelope.file_demand_request:type_name -> api.webrtc.v1.FileDemandRequest
	17, // 6: api.webrtc.v1.Envelope.file_demand_broadcast:type_name -> api.webrtc.v1.FileDemandBroadcast
	5,  // 7: api.webrtc.v1.Envelope.fee_pool_create:type_name -> api.webrtc.v1.FeePoolCreate
	6,  // 8: api.webrtc.v1.Envelope.fee_pool_sign:type_name -> api.webrtc.v1.FeePoolSign
	7,  // 9: api.webrtc.v1.Envelope.fee_pool_base_tx:type_name -> api.webrtc.v1.FeePoolBaseTx
	9,  // 10: api.webrtc.v1.Envelope.fee_pool_update:type_name -> api.webrtc.v1.FeePoolUpdate
	8,  // 11: api.webrtc.v1.Envelope.fee_pool_update_notify:type_name -> api.webrtc.v1.FeePoolUpdateNotify
	10, // 12: api.webrtc.v1.Envelope.fee_pool_close:type_name -> api.webrtc.v1.FeePoolClose
	11, // 13: api.webrtc.v1.Envelope.fee_pool_status_query:type_name -> api.webrtc.v1.FeePoolStatusQuery
	12, // 14: api.webrtc.v1.Envelope.fee_pool_status_response:type_name -> api.webrtc.v1.FeePoolStatusResponse
	13, // 15: api.webrtc.v1.Envelope.fee_pool_list_query:type_name -> api.webrtc.v1.FeePoolListQuery
	15, // 16: api.webrtc.v1.Envelope.fee_pool_list_response:type_name -> api.webrtc.v1.FeePoolListResponse
	18, // 17: api.webrtc.v1.FeePoolStatusResponse.created_at:type_name -> google.protobuf.Timestamp
	18, // 18: api.webrtc.v1.FeePoolStatusResponse.expires_at:type_name -> google.protobuf.Timestamp
	18, // 19: api.webrtc.v1.FeePoolListItem.create_at:type_name -> google.protobuf.Timestamp
	14, // 20: api.webrtc.v1.FeePoolListResponse.items:type_name -> api.webrtc.v1.FeePoolListItem
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_message_proto_msgTypes[1].OneofWrappers = []any{
		(*Envelope_ErrorReply)(nil),
		(*Envelope_WsSignaling)(nil),
		(*Envelope_FileDemandRequest)(nil),
		(*Envelope_FileDemandBroadcast)(nil),
		(*Envelope_FeePoolCreate)(nil),
		(*Envelope_FeePoolSign)(nil),
		(*Envelope_FeePoolBaseTx)(nil),
		(*Envelope_FeePoolUpdate)(nil),
		(*Envelope_FeePoolUpdateNotify)(nil),
		(*Envelope_FeePoolClose)(nil),
		(*Envelope_FeePoolStatusQuery)(nil),
		(*Envelope_FeePoolStatusResponse)(nil),
		(*Envelope_FeePoolListQuery)(nil),
		(*Envelope_FeePoolListResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_proto_rawDesc), len(file_message_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
