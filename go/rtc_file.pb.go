// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: rtc_file.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 文件报价
type RTCFileQuote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      []byte                 `protobuf:"bytes,1,opt,name=FileHash,proto3" json:"FileHash,omitempty"`            // 文件哈希
	FileName      []string               `protobuf:"bytes,2,rep,name=FileName,proto3" json:"FileName,omitempty"`            // 文件名
	FileSize      uint64                 `protobuf:"varint,3,opt,name=FileSize,proto3" json:"FileSize,omitempty"`           // 文件大小
	MetadataPrice uint64                 `protobuf:"varint,4,opt,name=MetadataPrice,proto3" json:"MetadataPrice,omitempty"` // 文件元数据价格
	Price         uint64                 `protobuf:"varint,5,opt,name=Price,proto3" json:"Price,omitempty"`                 // 总价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTCFileQuote) Reset() {
	*x = RTCFileQuote{}
	mi := &file_rtc_file_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTCFileQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCFileQuote) ProtoMessage() {}

func (x *RTCFileQuote) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_file_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCFileQuote.ProtoReflect.Descriptor instead.
func (*RTCFileQuote) Descriptor() ([]byte, []int) {
	return file_rtc_file_proto_rawDescGZIP(), []int{0}
}

func (x *RTCFileQuote) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *RTCFileQuote) GetFileName() []string {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *RTCFileQuote) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *RTCFileQuote) GetMetadataPrice() uint64 {
	if x != nil {
		return x.MetadataPrice
	}
	return 0
}

func (x *RTCFileQuote) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// 文件内容
type RTCFileContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      []byte                 `protobuf:"bytes,1,opt,name=FileHash,proto3" json:"FileHash,omitempty"`       // 文件哈希
	FileContent   []byte                 `protobuf:"bytes,2,opt,name=FileContent,proto3" json:"FileContent,omitempty"` // 文件内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTCFileContent) Reset() {
	*x = RTCFileContent{}
	mi := &file_rtc_file_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTCFileContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCFileContent) ProtoMessage() {}

func (x *RTCFileContent) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_file_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCFileContent.ProtoReflect.Descriptor instead.
func (*RTCFileContent) Descriptor() ([]byte, []int) {
	return file_rtc_file_proto_rawDescGZIP(), []int{1}
}

func (x *RTCFileContent) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *RTCFileContent) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

var File_rtc_file_proto protoreflect.FileDescriptor

const file_rtc_file_proto_rawDesc = "" +
	"\n" +
	"\x0ertc_file.proto\x12\rapi.webrtc.v1\"\x9e\x01\n" +
	"\fRTCFileQuote\x12\x1a\n" +
	"\bFileHash\x18\x01 \x01(\fR\bFileHash\x12\x1a\n" +
	"\bFileName\x18\x02 \x03(\tR\bFileName\x12\x1a\n" +
	"\bFileSize\x18\x03 \x01(\x04R\bFileSize\x12$\n" +
	"\rMetadataPrice\x18\x04 \x01(\x04R\rMetadataPrice\x12\x14\n" +
	"\x05Price\x18\x05 \x01(\x04R\x05Price\"N\n" +
	"\x0eRTCFileContent\x12\x1a\n" +
	"\bFileHash\x18\x01 \x01(\fR\bFileHash\x12 \n" +
	"\vFileContent\x18\x02 \x01(\fR\vFileContentB6Z4github.com/bitcoin-sv/KeyRTCServer/api_webrtc/gen/v1b\x06proto3"

var (
	file_rtc_file_proto_rawDescOnce sync.Once
	file_rtc_file_proto_rawDescData []byte
)

func file_rtc_file_proto_rawDescGZIP() []byte {
	file_rtc_file_proto_rawDescOnce.Do(func() {
		file_rtc_file_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rtc_file_proto_rawDesc), len(file_rtc_file_proto_rawDesc)))
	})
	return file_rtc_file_proto_rawDescData
}

var file_rtc_file_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rtc_file_proto_goTypes = []any{
	(*RTCFileQuote)(nil),   // 0: api.webrtc.v1.RTCFileQuote
	(*RTCFileContent)(nil), // 1: api.webrtc.v1.RTCFileContent
}
var file_rtc_file_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rtc_file_proto_init() }
func file_rtc_file_proto_init() {
	if File_rtc_file_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rtc_file_proto_rawDesc), len(file_rtc_file_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rtc_file_proto_goTypes,
		DependencyIndexes: file_rtc_file_proto_depIdxs,
		MessageInfos:      file_rtc_file_proto_msgTypes,
	}.Build()
	File_rtc_file_proto = out.File
	file_rtc_file_proto_goTypes = nil
	file_rtc_file_proto_depIdxs = nil
}
