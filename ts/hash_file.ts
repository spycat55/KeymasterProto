// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.26.1
// source: hash_file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.webrtc.v1";

/**
 * HashFile 定义文件哈希结构
 * block_length = 1 MiB
 * 不使用文件名，保证一个文件的 hashfile 的 hash 肯定一样
 * 最后一个 block 可能小于 1 MiB，用零补齐后面空格，保证 hash 一致性
 */
export interface Block {
  /** MAGIC_NUMBER = 0x4B455950  # "FILE" 的十六进制值，也代表版本 */
  magicNumber: number;
  /** 文件总长度 */
  length: number;
  /** 哈希块 */
  blocks: Buffer[];
}

export interface Live {
  /** MAGIC_NUMBER = 0x4B455950  # "LIVE" 的十六进制值，也代表版本 */
  magicNumber: number;
  /** 类型 */
  type: string;
  /** 公钥 */
  publicKey: Buffer;
  /** 频道名称 */
  channel: Buffer;
  /** 块大小 */
  blockLength: number;
}

export interface LiveShell {
  live?: Live | undefined;
  signature: Buffer;
}

export interface LiveBlock {
  liveHash: Buffer;
  /** 前序块，指的是 LiveBlockShell 的 hash */
  prevHash: Buffer;
  /** 块大小,最后一个块的 length 可能小于 block_length */
  length: number;
  /** data */
  data: Buffer;
}

export interface LiveBlockShell {
  liveBlock?: LiveBlock | undefined;
  signature: Buffer;
}

function createBaseBlock(): Block {
  return { magicNumber: 0, length: 0, blocks: [] };
}

export const Block: MessageFns<Block> = {
  encode(message: Block, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.magicNumber !== 0) {
      writer.uint32(13).fixed32(message.magicNumber);
    }
    if (message.length !== 0) {
      writer.uint32(16).uint64(message.length);
    }
    for (const v of message.blocks) {
      writer.uint32(26).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Block {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.magicNumber = reader.fixed32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.length = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.blocks.push(Buffer.from(reader.bytes()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return {
      magicNumber: isSet(object.magicNumber) ? globalThis.Number(object.magicNumber) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      blocks: globalThis.Array.isArray(object?.blocks)
        ? object.blocks.map((e: any) => Buffer.from(bytesFromBase64(e)))
        : [],
    };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    if (message.magicNumber !== 0) {
      obj.magicNumber = Math.round(message.magicNumber);
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if (message.blocks?.length) {
      obj.blocks = message.blocks.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Block>, I>>(base?: I): Block {
    return Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Block>, I>>(object: I): Block {
    const message = createBaseBlock();
    message.magicNumber = object.magicNumber ?? 0;
    message.length = object.length ?? 0;
    message.blocks = object.blocks?.map((e) => e) || [];
    return message;
  },
};

function createBaseLive(): Live {
  return { magicNumber: 0, type: "", publicKey: Buffer.alloc(0), channel: Buffer.alloc(0), blockLength: 0 };
}

export const Live: MessageFns<Live> = {
  encode(message: Live, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.magicNumber !== 0) {
      writer.uint32(13).fixed32(message.magicNumber);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(26).bytes(message.publicKey);
    }
    if (message.channel.length !== 0) {
      writer.uint32(34).bytes(message.channel);
    }
    if (message.blockLength !== 0) {
      writer.uint32(45).fixed32(message.blockLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Live {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.magicNumber = reader.fixed32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.publicKey = Buffer.from(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.channel = Buffer.from(reader.bytes());
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.blockLength = reader.fixed32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Live {
    return {
      magicNumber: isSet(object.magicNumber) ? globalThis.Number(object.magicNumber) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      publicKey: isSet(object.publicKey) ? Buffer.from(bytesFromBase64(object.publicKey)) : Buffer.alloc(0),
      channel: isSet(object.channel) ? Buffer.from(bytesFromBase64(object.channel)) : Buffer.alloc(0),
      blockLength: isSet(object.blockLength) ? globalThis.Number(object.blockLength) : 0,
    };
  },

  toJSON(message: Live): unknown {
    const obj: any = {};
    if (message.magicNumber !== 0) {
      obj.magicNumber = Math.round(message.magicNumber);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.channel.length !== 0) {
      obj.channel = base64FromBytes(message.channel);
    }
    if (message.blockLength !== 0) {
      obj.blockLength = Math.round(message.blockLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Live>, I>>(base?: I): Live {
    return Live.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Live>, I>>(object: I): Live {
    const message = createBaseLive();
    message.magicNumber = object.magicNumber ?? 0;
    message.type = object.type ?? "";
    message.publicKey = object.publicKey ?? Buffer.alloc(0);
    message.channel = object.channel ?? Buffer.alloc(0);
    message.blockLength = object.blockLength ?? 0;
    return message;
  },
};

function createBaseLiveShell(): LiveShell {
  return { live: undefined, signature: Buffer.alloc(0) };
}

export const LiveShell: MessageFns<LiveShell> = {
  encode(message: LiveShell, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.live !== undefined) {
      Live.encode(message.live, writer.uint32(10).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveShell {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveShell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.live = Live.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveShell {
    return {
      live: isSet(object.live) ? Live.fromJSON(object.live) : undefined,
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
    };
  },

  toJSON(message: LiveShell): unknown {
    const obj: any = {};
    if (message.live !== undefined) {
      obj.live = Live.toJSON(message.live);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveShell>, I>>(base?: I): LiveShell {
    return LiveShell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveShell>, I>>(object: I): LiveShell {
    const message = createBaseLiveShell();
    message.live = (object.live !== undefined && object.live !== null) ? Live.fromPartial(object.live) : undefined;
    message.signature = object.signature ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseLiveBlock(): LiveBlock {
  return { liveHash: Buffer.alloc(0), prevHash: Buffer.alloc(0), length: 0, data: Buffer.alloc(0) };
}

export const LiveBlock: MessageFns<LiveBlock> = {
  encode(message: LiveBlock, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.liveHash.length !== 0) {
      writer.uint32(10).bytes(message.liveHash);
    }
    if (message.prevHash.length !== 0) {
      writer.uint32(18).bytes(message.prevHash);
    }
    if (message.length !== 0) {
      writer.uint32(24).uint32(message.length);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveBlock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.liveHash = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prevHash = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.length = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveBlock {
    return {
      liveHash: isSet(object.liveHash) ? Buffer.from(bytesFromBase64(object.liveHash)) : Buffer.alloc(0),
      prevHash: isSet(object.prevHash) ? Buffer.from(bytesFromBase64(object.prevHash)) : Buffer.alloc(0),
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : Buffer.alloc(0),
    };
  },

  toJSON(message: LiveBlock): unknown {
    const obj: any = {};
    if (message.liveHash.length !== 0) {
      obj.liveHash = base64FromBytes(message.liveHash);
    }
    if (message.prevHash.length !== 0) {
      obj.prevHash = base64FromBytes(message.prevHash);
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveBlock>, I>>(base?: I): LiveBlock {
    return LiveBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveBlock>, I>>(object: I): LiveBlock {
    const message = createBaseLiveBlock();
    message.liveHash = object.liveHash ?? Buffer.alloc(0);
    message.prevHash = object.prevHash ?? Buffer.alloc(0);
    message.length = object.length ?? 0;
    message.data = object.data ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseLiveBlockShell(): LiveBlockShell {
  return { liveBlock: undefined, signature: Buffer.alloc(0) };
}

export const LiveBlockShell: MessageFns<LiveBlockShell> = {
  encode(message: LiveBlockShell, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.liveBlock !== undefined) {
      LiveBlock.encode(message.liveBlock, writer.uint32(10).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveBlockShell {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveBlockShell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.liveBlock = LiveBlock.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveBlockShell {
    return {
      liveBlock: isSet(object.liveBlock) ? LiveBlock.fromJSON(object.liveBlock) : undefined,
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
    };
  },

  toJSON(message: LiveBlockShell): unknown {
    const obj: any = {};
    if (message.liveBlock !== undefined) {
      obj.liveBlock = LiveBlock.toJSON(message.liveBlock);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveBlockShell>, I>>(base?: I): LiveBlockShell {
    return LiveBlockShell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveBlockShell>, I>>(object: I): LiveBlockShell {
    const message = createBaseLiveBlockShell();
    message.liveBlock = (object.liveBlock !== undefined && object.liveBlock !== null)
      ? LiveBlock.fromPartial(object.liveBlock)
      : undefined;
    message.signature = object.signature ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
