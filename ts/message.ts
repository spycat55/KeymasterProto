// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.26.1
// source: message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "api.webrtc.v1";

/** 付费 */
export interface CostPoolUpdate {
  /** 基础交易 */
  baseTxId: Buffer;
  /** 签名 */
  signature: Buffer;
  /** 序列号 */
  sequenceNumber: number;
  /** 金额 */
  amount: number;
}

export interface MessageMain {
  /** shake_hand, signaling, response, message_text */
  messageType: string;
  timestamp?: Date | undefined;
  data?: Buffer | undefined;
  costPoolUpdate?:
    | CostPoolUpdate
    | undefined;
  /** 转发的公钥 */
  forwardPublickey?:
    | Buffer
    | undefined;
  /** 回复消息，使用的前序消息 hash */
  previousShellMessageHash?:
    | Buffer
    | undefined;
  /** 回复消息，错误 */
  errorMessage?: string | undefined;
}

/** 转发消息 */
export interface MessageShell {
  /** shake_hand 就没有 Data */
  messageMain?:
    | Buffer
    | undefined;
  /** 如果是公开的，就有签名，否则没有，签data的名 */
  dataSignature?: Buffer | undefined;
}

function createBaseCostPoolUpdate(): CostPoolUpdate {
  return { baseTxId: Buffer.alloc(0), signature: Buffer.alloc(0), sequenceNumber: 0, amount: 0 };
}

export const CostPoolUpdate: MessageFns<CostPoolUpdate> = {
  encode(message: CostPoolUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseTxId.length !== 0) {
      writer.uint32(10).bytes(message.baseTxId);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.sequenceNumber !== 0) {
      writer.uint32(24).uint32(message.sequenceNumber);
    }
    if (message.amount !== 0) {
      writer.uint32(32).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CostPoolUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCostPoolUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.baseTxId = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequenceNumber = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CostPoolUpdate {
    return {
      baseTxId: isSet(object.baseTxId) ? Buffer.from(bytesFromBase64(object.baseTxId)) : Buffer.alloc(0),
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
      sequenceNumber: isSet(object.sequenceNumber) ? globalThis.Number(object.sequenceNumber) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CostPoolUpdate): unknown {
    const obj: any = {};
    if (message.baseTxId.length !== 0) {
      obj.baseTxId = base64FromBytes(message.baseTxId);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.sequenceNumber !== 0) {
      obj.sequenceNumber = Math.round(message.sequenceNumber);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CostPoolUpdate>, I>>(base?: I): CostPoolUpdate {
    return CostPoolUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CostPoolUpdate>, I>>(object: I): CostPoolUpdate {
    const message = createBaseCostPoolUpdate();
    message.baseTxId = object.baseTxId ?? Buffer.alloc(0);
    message.signature = object.signature ?? Buffer.alloc(0);
    message.sequenceNumber = object.sequenceNumber ?? 0;
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseMessageMain(): MessageMain {
  return {
    messageType: "",
    timestamp: undefined,
    data: undefined,
    costPoolUpdate: undefined,
    forwardPublickey: undefined,
    previousShellMessageHash: undefined,
    errorMessage: undefined,
  };
}

export const MessageMain: MessageFns<MessageMain> = {
  encode(message: MessageMain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageType !== "") {
      writer.uint32(10).string(message.messageType);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
    }
    if (message.data !== undefined) {
      writer.uint32(26).bytes(message.data);
    }
    if (message.costPoolUpdate !== undefined) {
      CostPoolUpdate.encode(message.costPoolUpdate, writer.uint32(34).fork()).join();
    }
    if (message.forwardPublickey !== undefined) {
      writer.uint32(42).bytes(message.forwardPublickey);
    }
    if (message.previousShellMessageHash !== undefined) {
      writer.uint32(50).bytes(message.previousShellMessageHash);
    }
    if (message.errorMessage !== undefined) {
      writer.uint32(58).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageMain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageMain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.costPoolUpdate = CostPoolUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.forwardPublickey = Buffer.from(reader.bytes());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.previousShellMessageHash = Buffer.from(reader.bytes());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageMain {
    return {
      messageType: isSet(object.messageType) ? globalThis.String(object.messageType) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : undefined,
      costPoolUpdate: isSet(object.costPoolUpdate) ? CostPoolUpdate.fromJSON(object.costPoolUpdate) : undefined,
      forwardPublickey: isSet(object.forwardPublickey)
        ? Buffer.from(bytesFromBase64(object.forwardPublickey))
        : undefined,
      previousShellMessageHash: isSet(object.previousShellMessageHash)
        ? Buffer.from(bytesFromBase64(object.previousShellMessageHash))
        : undefined,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined,
    };
  },

  toJSON(message: MessageMain): unknown {
    const obj: any = {};
    if (message.messageType !== "") {
      obj.messageType = message.messageType;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.costPoolUpdate !== undefined) {
      obj.costPoolUpdate = CostPoolUpdate.toJSON(message.costPoolUpdate);
    }
    if (message.forwardPublickey !== undefined) {
      obj.forwardPublickey = base64FromBytes(message.forwardPublickey);
    }
    if (message.previousShellMessageHash !== undefined) {
      obj.previousShellMessageHash = base64FromBytes(message.previousShellMessageHash);
    }
    if (message.errorMessage !== undefined) {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageMain>, I>>(base?: I): MessageMain {
    return MessageMain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageMain>, I>>(object: I): MessageMain {
    const message = createBaseMessageMain();
    message.messageType = object.messageType ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.data = object.data ?? undefined;
    message.costPoolUpdate = (object.costPoolUpdate !== undefined && object.costPoolUpdate !== null)
      ? CostPoolUpdate.fromPartial(object.costPoolUpdate)
      : undefined;
    message.forwardPublickey = object.forwardPublickey ?? undefined;
    message.previousShellMessageHash = object.previousShellMessageHash ?? undefined;
    message.errorMessage = object.errorMessage ?? undefined;
    return message;
  },
};

function createBaseMessageShell(): MessageShell {
  return { messageMain: undefined, dataSignature: undefined };
}

export const MessageShell: MessageFns<MessageShell> = {
  encode(message: MessageShell, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageMain !== undefined) {
      writer.uint32(10).bytes(message.messageMain);
    }
    if (message.dataSignature !== undefined) {
      writer.uint32(18).bytes(message.dataSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageShell {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageShell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageMain = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dataSignature = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageShell {
    return {
      messageMain: isSet(object.messageMain) ? Buffer.from(bytesFromBase64(object.messageMain)) : undefined,
      dataSignature: isSet(object.dataSignature) ? Buffer.from(bytesFromBase64(object.dataSignature)) : undefined,
    };
  },

  toJSON(message: MessageShell): unknown {
    const obj: any = {};
    if (message.messageMain !== undefined) {
      obj.messageMain = base64FromBytes(message.messageMain);
    }
    if (message.dataSignature !== undefined) {
      obj.dataSignature = base64FromBytes(message.dataSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageShell>, I>>(base?: I): MessageShell {
    return MessageShell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageShell>, I>>(object: I): MessageShell {
    const message = createBaseMessageShell();
    message.messageMain = object.messageMain ?? undefined;
    message.dataSignature = object.dataSignature ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
