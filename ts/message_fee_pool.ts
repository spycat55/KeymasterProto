// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.26.1
// source: message_fee_pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.webrtc.v1";

/** CreateFeePool 定义创建费用池请求 */
export interface CreateFeePool {
  /** 交易的十六进制表示 */
  tx: Buffer;
  /** client签名 */
  signature: Buffer;
  /** 金额 */
  amount: number;
}

/** CreateFeePoolResponse 定义创建费用池响应 */
export interface CreateFeePoolResponse {
  /** 前序ID */
  previousID: Buffer;
  /** server签名 */
  signature: Buffer;
}

export interface CommandFee {
  /** 前序ID */
  previousID: Buffer;
  /** client签名 */
  signature: Buffer;
  /** s equenceNumber */
  sequenceNumber: Buffer;
}

/**
 * A. 关闭费用池 send 内容直接就是发送报文，所以没有结构
 * B. ResponseCloseFeePool 定义关闭费用池响应
 */
export interface ResponseCloseFeePool {
  /** client签名 */
  signature: Buffer;
  /** useAmount */
  useAmount: number;
}

function createBaseCreateFeePool(): CreateFeePool {
  return { tx: Buffer.alloc(0), signature: Buffer.alloc(0), amount: 0 };
}

export const CreateFeePool: MessageFns<CreateFeePool> = {
  encode(message: CreateFeePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tx.length !== 0) {
      writer.uint32(10).bytes(message.tx);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tx = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeePool {
    return {
      tx: isSet(object.tx) ? Buffer.from(bytesFromBase64(object.tx)) : Buffer.alloc(0),
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CreateFeePool): unknown {
    const obj: any = {};
    if (message.tx.length !== 0) {
      obj.tx = base64FromBytes(message.tx);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateFeePool>, I>>(base?: I): CreateFeePool {
    return CreateFeePool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateFeePool>, I>>(object: I): CreateFeePool {
    const message = createBaseCreateFeePool();
    message.tx = object.tx ?? Buffer.alloc(0);
    message.signature = object.signature ?? Buffer.alloc(0);
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseCreateFeePoolResponse(): CreateFeePoolResponse {
  return { previousID: Buffer.alloc(0), signature: Buffer.alloc(0) };
}

export const CreateFeePoolResponse: MessageFns<CreateFeePoolResponse> = {
  encode(message: CreateFeePoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.previousID.length !== 0) {
      writer.uint32(10).bytes(message.previousID);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeePoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeePoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.previousID = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeePoolResponse {
    return {
      previousID: isSet(object.previousID) ? Buffer.from(bytesFromBase64(object.previousID)) : Buffer.alloc(0),
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
    };
  },

  toJSON(message: CreateFeePoolResponse): unknown {
    const obj: any = {};
    if (message.previousID.length !== 0) {
      obj.previousID = base64FromBytes(message.previousID);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateFeePoolResponse>, I>>(base?: I): CreateFeePoolResponse {
    return CreateFeePoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateFeePoolResponse>, I>>(object: I): CreateFeePoolResponse {
    const message = createBaseCreateFeePoolResponse();
    message.previousID = object.previousID ?? Buffer.alloc(0);
    message.signature = object.signature ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseCommandFee(): CommandFee {
  return { previousID: Buffer.alloc(0), signature: Buffer.alloc(0), sequenceNumber: Buffer.alloc(0) };
}

export const CommandFee: MessageFns<CommandFee> = {
  encode(message: CommandFee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.previousID.length !== 0) {
      writer.uint32(10).bytes(message.previousID);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.sequenceNumber.length !== 0) {
      writer.uint32(26).bytes(message.sequenceNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandFee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.previousID = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sequenceNumber = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandFee {
    return {
      previousID: isSet(object.previousID) ? Buffer.from(bytesFromBase64(object.previousID)) : Buffer.alloc(0),
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
      sequenceNumber: isSet(object.sequenceNumber)
        ? Buffer.from(bytesFromBase64(object.sequenceNumber))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: CommandFee): unknown {
    const obj: any = {};
    if (message.previousID.length !== 0) {
      obj.previousID = base64FromBytes(message.previousID);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.sequenceNumber.length !== 0) {
      obj.sequenceNumber = base64FromBytes(message.sequenceNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandFee>, I>>(base?: I): CommandFee {
    return CommandFee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandFee>, I>>(object: I): CommandFee {
    const message = createBaseCommandFee();
    message.previousID = object.previousID ?? Buffer.alloc(0);
    message.signature = object.signature ?? Buffer.alloc(0);
    message.sequenceNumber = object.sequenceNumber ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseResponseCloseFeePool(): ResponseCloseFeePool {
  return { signature: Buffer.alloc(0), useAmount: 0 };
}

export const ResponseCloseFeePool: MessageFns<ResponseCloseFeePool> = {
  encode(message: ResponseCloseFeePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature.length !== 0) {
      writer.uint32(10).bytes(message.signature);
    }
    if (message.useAmount !== 0) {
      writer.uint32(16).uint64(message.useAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseCloseFeePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseCloseFeePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.useAmount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseCloseFeePool {
    return {
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
      useAmount: isSet(object.useAmount) ? globalThis.Number(object.useAmount) : 0,
    };
  },

  toJSON(message: ResponseCloseFeePool): unknown {
    const obj: any = {};
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.useAmount !== 0) {
      obj.useAmount = Math.round(message.useAmount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseCloseFeePool>, I>>(base?: I): ResponseCloseFeePool {
    return ResponseCloseFeePool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseCloseFeePool>, I>>(object: I): ResponseCloseFeePool {
    const message = createBaseResponseCloseFeePool();
    message.signature = object.signature ?? Buffer.alloc(0);
    message.useAmount = object.useAmount ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
