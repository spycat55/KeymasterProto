// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.26.1
// source: rtc_file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.webrtc.v1";

/** 文件报价 */
export interface RTCFileQuote {
  /** 文件哈希 */
  FileHash: Buffer;
  /** 文件名 */
  FileName: string[];
  /** 文件大小 */
  FileSize: number;
  /** 文件元数据价格 */
  MetadataPrice: number;
  /** 总价格 */
  Price: number;
}

/** 文件内容 */
export interface RTCFileContent {
  /** 文件哈希 */
  FileHash: Buffer;
  /** 文件内容 */
  FileContent: Buffer;
}

function createBaseRTCFileQuote(): RTCFileQuote {
  return { FileHash: Buffer.alloc(0), FileName: [], FileSize: 0, MetadataPrice: 0, Price: 0 };
}

export const RTCFileQuote: MessageFns<RTCFileQuote> = {
  encode(message: RTCFileQuote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.FileHash.length !== 0) {
      writer.uint32(10).bytes(message.FileHash);
    }
    for (const v of message.FileName) {
      writer.uint32(18).string(v!);
    }
    if (message.FileSize !== 0) {
      writer.uint32(24).uint64(message.FileSize);
    }
    if (message.MetadataPrice !== 0) {
      writer.uint32(32).uint64(message.MetadataPrice);
    }
    if (message.Price !== 0) {
      writer.uint32(40).uint64(message.Price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCFileQuote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCFileQuote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.FileHash = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.FileName.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.FileSize = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.MetadataPrice = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Price = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCFileQuote {
    return {
      FileHash: isSet(object.FileHash) ? Buffer.from(bytesFromBase64(object.FileHash)) : Buffer.alloc(0),
      FileName: globalThis.Array.isArray(object?.FileName) ? object.FileName.map((e: any) => globalThis.String(e)) : [],
      FileSize: isSet(object.FileSize) ? globalThis.Number(object.FileSize) : 0,
      MetadataPrice: isSet(object.MetadataPrice) ? globalThis.Number(object.MetadataPrice) : 0,
      Price: isSet(object.Price) ? globalThis.Number(object.Price) : 0,
    };
  },

  toJSON(message: RTCFileQuote): unknown {
    const obj: any = {};
    if (message.FileHash.length !== 0) {
      obj.FileHash = base64FromBytes(message.FileHash);
    }
    if (message.FileName?.length) {
      obj.FileName = message.FileName;
    }
    if (message.FileSize !== 0) {
      obj.FileSize = Math.round(message.FileSize);
    }
    if (message.MetadataPrice !== 0) {
      obj.MetadataPrice = Math.round(message.MetadataPrice);
    }
    if (message.Price !== 0) {
      obj.Price = Math.round(message.Price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCFileQuote>, I>>(base?: I): RTCFileQuote {
    return RTCFileQuote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCFileQuote>, I>>(object: I): RTCFileQuote {
    const message = createBaseRTCFileQuote();
    message.FileHash = object.FileHash ?? Buffer.alloc(0);
    message.FileName = object.FileName?.map((e) => e) || [];
    message.FileSize = object.FileSize ?? 0;
    message.MetadataPrice = object.MetadataPrice ?? 0;
    message.Price = object.Price ?? 0;
    return message;
  },
};

function createBaseRTCFileContent(): RTCFileContent {
  return { FileHash: Buffer.alloc(0), FileContent: Buffer.alloc(0) };
}

export const RTCFileContent: MessageFns<RTCFileContent> = {
  encode(message: RTCFileContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.FileHash.length !== 0) {
      writer.uint32(10).bytes(message.FileHash);
    }
    if (message.FileContent.length !== 0) {
      writer.uint32(18).bytes(message.FileContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCFileContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCFileContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.FileHash = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.FileContent = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCFileContent {
    return {
      FileHash: isSet(object.FileHash) ? Buffer.from(bytesFromBase64(object.FileHash)) : Buffer.alloc(0),
      FileContent: isSet(object.FileContent) ? Buffer.from(bytesFromBase64(object.FileContent)) : Buffer.alloc(0),
    };
  },

  toJSON(message: RTCFileContent): unknown {
    const obj: any = {};
    if (message.FileHash.length !== 0) {
      obj.FileHash = base64FromBytes(message.FileHash);
    }
    if (message.FileContent.length !== 0) {
      obj.FileContent = base64FromBytes(message.FileContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCFileContent>, I>>(base?: I): RTCFileContent {
    return RTCFileContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCFileContent>, I>>(object: I): RTCFileContent {
    const message = createBaseRTCFileContent();
    message.FileHash = object.FileHash ?? Buffer.alloc(0);
    message.FileContent = object.FileContent ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
